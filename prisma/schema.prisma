datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum ReporterStatus {
    ACTIVE
    PAUSED
    ARCHIVED
}

model User {
    id              String                @id @default(ulid())
    authProviderUid String                @unique
    createdAt       DateTime              @default(now()) @db.Timestamptz()
    updatedAt       DateTime              @default(now()) @updatedAt @db.Timestamptz()
    deletedAt       DateTime?
    lastLogin       DateTime?
    reporters       Reporter[]
    schedules       Schedule[]
    channels        NotificationChannel[]
    subscriptions   Subscription[]
    prompts         Prompt[]
    RelevancyPrompt RelevancyPrompt[]
}

model Reporter {
    id                 String              @id @default(ulid())
    name               String              @db.VarChar(100)
    description        String?             @db.Text()
    strategy           String              @db.VarChar(100)
    status             ReporterStatus      @default(ACTIVE)
    relevancyThreshold Float?
    createdAt          DateTime            @default(now()) @db.Timestamptz()
    updatedAt          DateTime            @default(now()) @updatedAt @db.Timestamptz()
    deletedAt          DateTime?
    promptId           String?
    relevancyPromptId  String?
    metadata           Json?
    creatorId          String
    creator            User                @relation(fields: [creatorId], references: [id])
    prompt             Prompt?             @relation(fields: [promptId], references: [id])
    issues             Issue[]
    scheduledReporters ScheduledReporter[]
    subscriptions      Subscription[]
    RelevancyPrompt    RelevancyPrompt?    @relation(fields: [relevancyPromptId], references: [id])

    @@index([creatorId])
}

model Issue {
    id          String    @id @default(ulid())
    title       String
    description String?
    reporterId  String
    reporter    Reporter  @relation(fields: [reporterId], references: [id])
    successful  Boolean   @default(true)
    createdAt   DateTime  @default(now()) @db.Timestamptz()
    updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamptz()
    deletedAt   DateTime?
    stories     Story[]

    @@index([reporterId])
}

model Story {
    id                String           @id @default(ulid())
    title             String
    url               String           @db.VarChar(2048)
    summary           String?
    relevancyScore    Float?
    createdAt         DateTime         @default(now()) @db.Timestamptz()
    updatedAt         DateTime         @default(now()) @updatedAt @db.Timestamptz()
    deletedAt         DateTime?
    promptId          String?
    prompt            Prompt?          @relation(fields: [promptId], references: [id])
    relevancyPromptId String?
    relevancyPrompt   RelevancyPrompt? @relation(fields: [relevancyPromptId], references: [id])
    issueId           String
    issue             Issue            @relation(fields: [issueId], references: [id])

    @@index([issueId, createdAt])
}

model Subscription {
    id                    String               @id @default(ulid())
    userId                String
    reporterId            String
    notificationChannelId String?
    createdAt             DateTime             @default(now()) @db.Timestamptz()
    updatedAt             DateTime             @default(now()) @updatedAt @db.Timestamptz()
    deletedAt             DateTime?
    user                  User                 @relation(fields: [userId], references: [id])
    reporter              Reporter             @relation(fields: [reporterId], references: [id])
    notificationChannel   NotificationChannel? @relation(fields: [notificationChannelId], references: [id])

    @@unique([userId, reporterId])
    @@index([userId])
    @@index([reporterId])
}

model NotificationChannel {
    id            String         @id @default(ulid())
    name          String         @db.VarChar(100)
    description   String?
    type          String         @db.VarChar(50)
    settings      Json
    userId        String?
    user          User?          @relation(fields: [userId], references: [id])
    createdAt     DateTime       @default(now()) @db.Timestamptz()
    updatedAt     DateTime       @default(now()) @updatedAt @db.Timestamptz()
    deletedAt     DateTime?
    subscriptions Subscription[]
}

model Prompt {
    id          String     @id @default(ulid())
    name        String
    description String?
    text        String?
    creatorId   String
    creator     User       @relation(fields: [creatorId], references: [id])
    createdAt   DateTime   @default(now()) @db.Timestamptz()
    updatedAt   DateTime   @default(now()) @updatedAt @db.Timestamptz()
    deletedAt   DateTime?
    reporters   Reporter[]
    stories     Story[]
}

model RelevancyPrompt {
    id          String     @id @default(ulid())
    name        String
    description String?
    text        String?
    creatorId   String
    creator     User       @relation(fields: [creatorId], references: [id])
    createdAt   DateTime   @default(now()) @db.Timestamptz()
    updatedAt   DateTime   @default(now()) @updatedAt @db.Timestamptz()
    deletedAt   DateTime?
    reporters   Reporter[]
    stories     Story[]
}

model Schedule {
    id                 String              @id @default(ulid())
    name               String              @db.VarChar(100)
    cron               String              @db.VarChar(255)
    timezone           String              @db.VarChar(100)
    nextRunAt          DateTime?
    lastRunAt          DateTime?
    paused             Boolean             @default(false)
    ownerId            String
    createdAt          DateTime            @default(now()) @db.Timestamptz()
    updatedAt          DateTime            @default(now()) @updatedAt @db.Timestamptz()
    deletedAt          DateTime?
    owner              User                @relation(fields: [ownerId], references: [id])
    scheduledReporters ScheduledReporter[]
}

model ScheduledReporter {
    id         String   @id @default(ulid())
    scheduleId String
    reporterId String
    schedule   Schedule @relation(fields: [scheduleId], references: [id])
    reporter   Reporter @relation(fields: [reporterId], references: [id])

    @@unique([scheduleId, reporterId])
}
