/// A Schedule defines when (at what cron interval) certain Reporters should be scanned.
/// Schedules are owned by a User and can be linked to multiple Reporters via ScheduledReporter.
model Schedule {
    /// The unique identifier for the Schedule.
    id                 String              @id @default(ulid())
    /// A human-readable name for the Schedule.
    name               String              @db.VarChar(100)
    /// The cron expression defining when the Schedule runs.
    cron               String              @db.VarChar(100)
    /// The timezone of the Schedule.
    timezone           String              @db.VarChar(100)
    /// Timestamp indicating when the schedule is next due to run.
    nextRunAt          DateTime?
    /// Timestamp of the last time this schedule ran.
    lastRunAt          DateTime?
    /// Whether the schedule is currently paused.
    paused             Boolean             @default(false)
    /// The owner (User) of this schedule.
    owner              User                @relation(fields: [ownerId], references: [id])
    /// Foreign key referencing the User who owns this schedule.
    ownerId            String
    /// Timestamp when the Schedule was created.
    createdAt          DateTime            @default(now()) @db.Timestamptz()
    /// Timestamp when the Schedule was last updated.
    updatedAt          DateTime            @default(now()) @updatedAt @db.Timestamptz()
    /// Soft-delete timestamp; if set, the Schedule is considered deleted.
    deletedAt          DateTime?
    /// The join records linking this Schedule with Reporters that should be run on this schedule.
    scheduledReporters ScheduledReporter[]
    /// The Runs that have been executed by this Schedule.
    runs               Run[]
}

/// A ScheduledReporter model acts as a join model for the many-to-many relationship between Schedules and Reporters.
/// This allows multiple Reporters to be associated with a single Schedule and vice versa.
model ScheduledReporter {
    /// The unique identifier for the ScheduledReporter record.
    id         String @id @default(ulid())
    /// Foreign key referencing the Schedule.
    scheduleId String
    /// Foreign key referencing the Reporter.
    reporterId String

    /// The Schedule in the relationship.
    schedule Schedule @relation(fields: [scheduleId], references: [id])
    /// The Reporter in the relationship.
    reporter Reporter @relation(fields: [reporterId], references: [id])

    @@unique([scheduleId, reporterId])
}

/// A Run represents a batch execution triggered by a Schedule.
/// When a Schedule runs at its specified cron time, it creates a Run that can trigger multiple Issues (for multiple Reporters).
model Run {
    /// The unique identifier for the Run.
    id          String    @id @default(ulid())
    /// Foreign key referencing the Schedule that triggered this Run.
    scheduleId  String?
    /// Timestamp when the Run started.
    startedAt   DateTime  @default(now()) @db.Timestamptz()
    /// Timestamp when the Run completed.
    completedAt DateTime?

    /// The Schedule that triggered this Run.
    schedule Schedule? @relation(fields: [scheduleId], references: [id])

    /// The Issues (Reporter scans) initiated by this Run.
    issues Issue[]
}
