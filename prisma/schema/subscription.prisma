/// A Subscription allows a User (subscriber) to subscribe to a Reporter owned by another User.
/// Subscriptions may optionally reference a specific NotificationChannel for delivering updates.
model Subscription {
    /// The unique identifier for the Subscription.
    id                    String  @id @default(ulid())
    /// Foreign key referencing the User who is subscribing.
    userId                String
    /// Foreign key referencing the Reporter being subscribed to.
    reporterId            String
    /// Optional foreign key referencing the NotificationChannel used for this subscription.
    notificationChannelId String?

    /// Timestamp when the Subscription was created.
    createdAt DateTime  @default(now()) @db.Timestamptz()
    /// Timestamp when the Subscription was last updated.
    updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz()
    /// Soft-delete timestamp; if set, the Subscription is considered deleted.
    deletedAt DateTime?

    /// The User who is subscribing to the Reporter.
    user                User                 @relation(fields: [userId], references: [id])
    /// The Reporter being subscribed to by the user.
    reporter            Reporter             @relation(fields: [reporterId], references: [id])
    /// The NotificationChannel (if any) that this subscription uses to send notifications.
    notificationChannel NotificationChannel? @relation(fields: [notificationChannelId], references: [id])

    @@unique([userId, reporterId]) // Ensures a user cannot subscribe to the same Reporter more than once.
    @@index([userId])
    @@index([reporterId])
}
