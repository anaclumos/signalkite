/// Represents different strategies that a Reporter can use to gather or discover stories.
enum ReporterStrategyType {
    /// Use EXA_SEARCH as the data fetching strategy.
    EXA_SEARCH
    /// Use WHOIS_LOOKUP as the data fetching strategy.
    WHOIS_LOOKUP
    /// Use HN_BEST_STORIES (Hacker News best stories feed) as the data fetching strategy.
    HN_BEST_STORIES
}

/// Represents the type of notification channel through which a user can receive notifications.
enum NotificationChannelType {
    /// Notifications via Email.
    EMAIL
    /// Notifications via TEXT.
    TEXT
    /// Notifications via Web Push.
    PUSH
    /// Notifications via Slack.
    SLACK
}

/// Represents the possible statuses of a Reporter.
enum ReporterStatus {
    /// The Reporter is actively scanning or ready to be scanned.
    ACTIVE
    /// The Reporter is paused and not currently running scans, but visible at the marketplace.
    PAUSED
    /// The Reporter is archived and not visible or active, but still exists in the database, and only visible to the owner.
    ARCHIVED
}

/// A Reporter represents a "data stream" or a monitored topic/keyword set that the user wants to track.
/// Each Reporter uses a specific strategy to discover stories and can have multiple stories and news.
model Reporter {
    /// The unique identifier for the Reporter.
    id          String               @id @default(ulid())
    /// The human-readable name of the Reporter.
    name        String               @db.VarChar(100)
    /// An optional description of what the Reporter is monitoring.
    description String?              @db.Text()
    /// The strategy this Reporter uses to fetch or discover data.
    strategy    ReporterStrategyType @default(EXA_SEARCH)
    /// The current operational status of the Reporter.
    status      ReporterStatus       @default(ACTIVE)
    /// Timestamp when the Reporter record was created.
    createdAt   DateTime             @default(now()) @db.Timestamptz()
    /// Timestamp when the Reporter record was last updated.
    updatedAt   DateTime             @default(now()) @updatedAt @db.Timestamptz()
    /// Soft-delete timestamp; if set, the Reporter is considered deleted or archived.
    deletedAt   DateTime?
    /// Foreign key referencing the Prompt used by this Reporter for post-processing.
    promptId    String?
    /// Adding JSON metadata for reporter-specific configuration.
    metadata    Json?

    /// The user who created this Reporter (its owner).
    creator   User   @relation(fields: [creatorId], references: [id])
    /// Foreign key referencing the creator of this Reporter.
    creatorId String

    /// The Prompt referenced by this Reporter for post-processing.
    prompt Prompt? @relation(fields: [promptId], references: [id])

    /// The list of Issues (scans) that have been performed for this Reporter.
    issues             Issue[]
    /// The list of Stories discovered for this Reporter.
    stories            Story[]
    /// The join model that associates Reporters with Schedules (many-to-many relation).
    scheduledReporters ScheduledReporter[]
    /// Subscriptions from other users who are interested in updates from this Reporter.
    subscriptions      Subscription[]

    @@index([creatorId])
}
